# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.

# Inputs
# 2
# 10
# 100

# Outputs
# 10
# 44

#We will need math and decimal libraries for the precision required
import math
import decimal
from decimal import Decimal as d
decimal.getcontext().prec = 64 # Increase decimal precision


sq5 = d(5).sqrt() # Root of 5 constant, 2.236...
phi = d((1 + sq5) / 2) # Phi constant, 1.6108...

# Get the n-th Fib via Binet's formula: phi^n - (1-phi)^n * 1/sq5
# This is accurate up to the 291st n due to precision errors
def fib(n):
    f = (phi**d(n) - (1-phi)**d(n)) / sq5
    return int(f+d(0.5)) # Add .5 to round correctly when casting to long

# Return the position of n in the Fib
def fibPosition(n):
    return math.log(sq5 * n, phi)


t = input('') # Get number of tests
ns = []
for i in range(t):
    ns.append(int(raw_input(''))) # Get n

for n in ns:
    # Get position of n in Fib, round down to get index not exceding n
    positionOfN = fibPosition(n)
    # We need the highest even Fib less than p
    # Only every 3rd Fibonacci number is even so p//3*3 brings it down to nearest multiple of 3
    largestEven = positionOfN // 3 * 3
    # Since Fibs are additive, any fib(n) can be replaced with fib(n-2) + fib(n-1)
    # Further, we can expand the fib(n-1) in that to give us fib(n-2) + fib(n-2) + fib(n-3)
    # Now we expand the second fib(n-2) to give us fib(n-2) + fib(n-3) + fib(n-4) + fib(n-3)
    # Continuing, expand the last fib(n-3) to give us fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-4)
    # All of these are equal to fib(n)
    # Eventually fib(n-x) will reach the beginning of the sequence and be unable to be meaningfully expanded further
    # That will leave us with a final fib(n-n) at the end and that is always 1, the first digit of the sequence
    # To generalize this sequence, fib(n) = fib(n-2) + fib(n-3) + ... + 1
    # If we shift n by 2 and -1 both sides, we can say the sum of fib(n) + fib(n-1) + fib(n-2) ... = fib(n+2) - 1
    # So calculate the sum of digits up to position p
    fibSum = fib(largestEven + 2) - 1
    # We only want the sum of the even ones though
    # Luckily the sum of digits 3rd-1 and 3rd-2 equal digit 3rd so we can remove the sum of those odd digits by simply dividing by 2
    print fibSum / 2